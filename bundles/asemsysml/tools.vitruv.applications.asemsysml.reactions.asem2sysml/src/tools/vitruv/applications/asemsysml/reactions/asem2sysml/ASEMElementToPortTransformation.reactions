import edu.kit.ipd.sdq.ASEM.primitivetypes.PrimitiveType
import org.eclipse.papyrus.sysml14.portsandflows.FlowDirection
import tools.vitruv.applications.asemsysml.ASEMSysMLConstants
import tools.vitruv.applications.asemsysml.ASEMSysMLHelper
import tools.vitruv.applications.asemsysml.ASEMSysMLPrimitiveTypeHelper
import tools.vitruv.domains.sysml.SysMlNamspace
import edu.kit.ipd.sdq.ASEM.classifiers.Component
import org.eclipse.uml2.uml.AggregationKind

import "edu.kit.ipd.sdq.asem" as asem
import "http://www.eclipse.org/papyrus/sysml/1.4/SysML" as sysml
import "http://www.eclipse.org/uml2/5.0.0/UML" as uml

reactions: asem2sysmlElementsToPort
in reaction to changes in ASEM
execute actions in SysML


reaction MessageTransformation {
	after element asem::Message created and inserted in asem::Component[typedElements]
	call {
		logger.info("[ASEMSysML] Create port for message " + newValue.name);
		
		val messageType = newValue.type;

		if(messageType instanceof PrimitiveType) {
			
			val sysmlPrimitiveType = ASEMSysMLPrimitiveTypeHelper.getSysMLTypeByASEMType(messageType.class);
			createPortWithPrimitiveType(newValue, sysmlPrimitiveType);
			
		}else if(messageType instanceof Component){
			
			createPortWithComponentType(newValue);
			
		}
	}
}
routine createPortWithComponentType(asem::Message message) {
	match {
		val baseClass = retrieve uml::Class corresponding to message.eContainer
		val baseClassType = retrieve uml::Class corresponding to message.type
	}
	action {
		// TODO [BR] Remove code duplication!	
		val port = create uml::Port and initialize {
			port.name = message.name;
			port.type = baseClassType;
			port.aggregation = AggregationKind.COMPOSITE_LITERAL;
			
			baseClass.ownedPorts.add(port);
		}
		
		val flowProperty = create sysml::FlowProperty and initialize {
			flowProperty.base_Property = port;
		}

		add correspondence between message and port

		call {
			changeFlowDirection(flowProperty, message);

			persistProjectRelative(message, flowProperty, ASEMSysMLHelper.getProjectModelPath(ASEMSysMLConstants.TEST_SYSML_MODEL_NAME, SysMlNamspace.FILE_EXTENSION));
		}
		
	}
}
routine createPortWithPrimitiveType(asem::Message message, uml::PrimitiveType portType) {
	match {
		val baseClass = retrieve uml::Class corresponding to message.eContainer
	}
	action {
		
		val port = create uml::Port and initialize {
			port.name = message.name;
			port.type = ASEMSysMLPrimitiveTypeHelper.getSysMLPrimitiveTypeFromSysMLModel(this.correspondenceModel, message, portType);
			port.aggregation = AggregationKind.COMPOSITE_LITERAL;
			
			baseClass.ownedPorts.add(port);
		}
		
		val flowProperty = create sysml::FlowProperty and initialize {
			flowProperty.base_Property = port;
		}

		add correspondence between message and port
		
		call {
			changeFlowDirection(flowProperty, message);
			persistProjectRelative(message, flowProperty, ASEMSysMLHelper.getProjectModelPath(ASEMSysMLConstants.TEST_SYSML_MODEL_NAME, SysMlNamspace.FILE_EXTENSION));
		}
		
	}
}

reaction MessageDeletionTransformation {
	after element asem::Message deleted and removed from asem::Component[typedElements]
	call {
		logger.info("[ASEMSysML] Remove port for message " + oldValue.name + " ...");
		
		removePort(oldValue);
	}
}
reaction ParameterDeletionTransformation {
	after element asem::Parameter deleted and removed from asem::Method[parameters]
	call {
		logger.info("[ASEMSysML] Remove port for parameter " + oldValue.name + " ...");
		removePort(oldValue);
	}
}
reaction ReturnTypeDeletionTransformation {
	after element replaced at asem::Method[returnType]
		with newValue == null
	call {
		logger.info("[ASEMSysML] Remove port for return type " + oldValue.name + " ...");
		removePort(oldValue);
	}
}
routine removePort(asem::TypedElement typedElement) {
	match {
		val port = retrieve uml::Port corresponding to typedElement
	}
	action {
		call {
			
			val flowProperty = ASEMSysMLHelper.getFlowProperty(port);
			val property = flowProperty.base_Property;
			
			deletePortWithAllElements(port, property, flowProperty);
		}
	}
}
routine deletePortWithAllElements(uml::Port port, uml::Property property, sysml::FlowProperty flowProperty) {
	action {
		delete property
		delete flowProperty
		delete port
	}
}

reaction ReadableChangeTransformation {
	after attribute replaced at asem::Message[readable]
	call changePortDirection(affectedEObject)
}
reaction WritableChangeTransformation {
	after attribute replaced at asem::Message[writable]
	call changePortDirection(affectedEObject)
}
routine changePortDirection(asem::Message message) {
	match {
		val port = retrieve uml::Port corresponding to message	
	}
	action {
		call {
			val flowProperty = ASEMSysMLHelper.getFlowProperty(port);
			changeFlowDirection(flowProperty, message);
		}
	}
}
routine changeFlowDirection(sysml::FlowProperty flowProperty, asem::Message message) {
	match {
		check flowProperty != null
	}
	action {
		update flowProperty {
			if (message.readable && !message.writable) {
								
				flowProperty.direction = FlowDirection.IN;
			
			} else if (!message.readable && message.writable) {
			
				flowProperty.direction = FlowDirection.OUT;
			
			} else if (message.readable && message.writable) {
			
				flowProperty.direction = FlowDirection.INOUT;
			
			} else {
				logger.warn("[ASEMSysML] Unsupported flow direction!");
			}
		}
	}
}

reaction PrimitiveTypeChangeTransformation {
	after element asem::PrimitiveType replaced at asem::TypedElement[type]
		with oldValue != null
	call {
		logger.info("[ASEMSysML] Message type changed from " + oldValue + " to " + newValue + ".");
		
		val sysmlPrimitiveType = ASEMSysMLPrimitiveTypeHelper.getSysMLTypeByASEMType(newValue.class);
		changePortTypeToPrimitiveType(affectedEObject, sysmlPrimitiveType);
	}
}
routine changePortTypeToPrimitiveType(asem::TypedElement typedElement, uml::PrimitiveType type) {
	match {
		val port = retrieve uml::Port corresponding to typedElement
	}
	action {
		update port {
			port.type = ASEMSysMLPrimitiveTypeHelper.getSysMLPrimitiveTypeFromSysMLModel(this.correspondenceModel, typedElement, type);
		}
	}
}

reaction ComponentTypeChangeTransformation {
	after element asem::Component replaced at asem::TypedElement[type]
		with oldValue != null
	call {
		logger.info("[ASEMSysML] Message type changed from " + oldValue + " to " + newValue + ".");

		changePortTypeToComponentType(affectedEObject, newValue);
	}
}
routine changePortTypeToComponentType(asem::TypedElement typedElement, asem::Component component) {
	match {
		val port = retrieve uml::Port corresponding to typedElement
		val baseClassType = retrieve uml::Class corresponding to component
	}
	action {
		update port {
			port.type = baseClassType;
		}
	}
}


reaction ParameterTransformation {
	after element asem::Parameter created and inserted in asem::Method[parameters]
	call {
		logger.info("[ASEMSysML] Create port for parameter " + newValue.name);
		
		val parameterType = newValue.type;
		if(parameterType instanceof PrimitiveType) {
			
			val sysmlPrimitiveType = ASEMSysMLPrimitiveTypeHelper.getSysMLTypeByASEMType(parameterType.class);
			createPortForParameterWithPrimitiveType(newValue, sysmlPrimitiveType);
			
		}else if(parameterType instanceof Component){
			
			createPortForParameterWithComponentType(newValue);
			
		}
	}
}
routine createPortForParameterWithPrimitiveType(asem::Parameter parameter, uml::PrimitiveType type) {
	match {
		check parameter.eContainer.eContainer instanceof Component
		val baseClass = retrieve uml::Class corresponding to parameter.eContainer.eContainer
	}
	action {
		
		val port = create uml::Port and initialize {
			port.name = parameter.name;
			port.type = ASEMSysMLPrimitiveTypeHelper.getSysMLPrimitiveTypeFromSysMLModel(this.correspondenceModel, parameter, type);
			port.aggregation = AggregationKind.COMPOSITE_LITERAL;
			
			baseClass.ownedPorts.add(port);
		}

		val flowProperty = create sysml::FlowProperty and initialize {
			flowProperty.base_Property = port;
			flowProperty.direction = FlowDirection.IN;
		}

		add correspondence between parameter and port
		
		call {
			persistProjectRelative(parameter, flowProperty, ASEMSysMLHelper.getProjectModelPath(ASEMSysMLConstants.TEST_SYSML_MODEL_NAME, SysMlNamspace.FILE_EXTENSION));
		}
		
	}
}
routine createPortForParameterWithComponentType(asem::Parameter parameter) {
	match {
		check parameter.eContainer.eContainer instanceof Component
		val baseClass = retrieve uml::Class corresponding to parameter.eContainer.eContainer
		val baseClassType = retrieve uml::Class corresponding to parameter.type
		
	}
	action {
		
		val port = create uml::Port and initialize {
			port.name = parameter.name;
			port.type = baseClassType;
			port.aggregation = AggregationKind.COMPOSITE_LITERAL;
			
			baseClass.ownedPorts.add(port);
		}
		
		val flowProperty = create sysml::FlowProperty and initialize {
			flowProperty.base_Property = port;
			flowProperty.direction = FlowDirection.IN;
		}

		add correspondence between parameter and port
		
		call {
			persistProjectRelative(parameter, flowProperty, ASEMSysMLHelper.getProjectModelPath(ASEMSysMLConstants.TEST_SYSML_MODEL_NAME, SysMlNamspace.FILE_EXTENSION));
		}
		
	}
}

reaction ReturnTypeTransformation {
	after element asem::ReturnType replaced at asem::Method[returnType]
		with newValue != null
	call {
		logger.info("[ASEMSysML] Create port for return type " + newValue.name);

		val type = newValue.type;
		if(type instanceof PrimitiveType) {
			
			val sysmlPrimitiveType = ASEMSysMLPrimitiveTypeHelper.getSysMLTypeByASEMType(type.class);
			createPortForReturnTypeWithPrimitiveType(newValue, sysmlPrimitiveType);
			
		}else if(type instanceof Component){
			
			createPortForReturnTypeWithComponentType(newValue);
			
		}
	}
}
routine createPortForReturnTypeWithPrimitiveType(asem::ReturnType returnType, uml::PrimitiveType type) {
	match {
		check returnType.eContainer.eContainer instanceof Component
		val baseClass = retrieve uml::Class corresponding to returnType.eContainer.eContainer
	}
	action {
		
		val port = create uml::Port and initialize {
			port.name = returnType.name;
			port.type = ASEMSysMLPrimitiveTypeHelper.getSysMLPrimitiveTypeFromSysMLModel(this.correspondenceModel, returnType, type);
			port.aggregation = AggregationKind.COMPOSITE_LITERAL;
			
			baseClass.ownedPorts.add(port);
		}
		
		val flowProperty = create sysml::FlowProperty and initialize {
			flowProperty.base_Property = port;
			flowProperty.direction = FlowDirection.OUT;
		}

		add correspondence between returnType and port
		
		call {
			persistProjectRelative(returnType, flowProperty, ASEMSysMLHelper.getProjectModelPath(ASEMSysMLConstants.TEST_SYSML_MODEL_NAME, SysMlNamspace.FILE_EXTENSION));
		}
		
	}
}
routine createPortForReturnTypeWithComponentType(asem::ReturnType returnType) {
	match {
		check returnType.eContainer.eContainer instanceof Component
		val baseClass = retrieve uml::Class corresponding to returnType.eContainer.eContainer
		val baseClassType = retrieve uml::Class corresponding to returnType.type
		
	}
	action {
		
		val port = create uml::Port and initialize {
			port.name = returnType.name;
			port.type = baseClassType;
			port.aggregation = AggregationKind.COMPOSITE_LITERAL;
			
			baseClass.ownedPorts.add(port);
		}
		
		val flowProperty = create sysml::FlowProperty and initialize {
			flowProperty.base_Property = port;
			flowProperty.direction = FlowDirection.OUT;
		}
		
		add correspondence between returnType and port
		
		call {
			persistProjectRelative(returnType, flowProperty, ASEMSysMLHelper.getProjectModelPath(ASEMSysMLConstants.TEST_SYSML_MODEL_NAME, SysMlNamspace.FILE_EXTENSION));
		}
		
	}
}