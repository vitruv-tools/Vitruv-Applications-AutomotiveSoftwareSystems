import edu.kit.ipd.sdq.ASEM.classifiers.Module
import org.eclipse.papyrus.sysml14.blocks.Block
import org.eclipse.uml2.uml.util.UMLUtil
import tools.vitruv.applications.asemsysml.ASEMSysMLHelper
import tools.vitruv.applications.asemsysml.ASEMSysMLUserInteractionHelper
import tools.vitruv.applications.asemsysml.ASEMSysMLConstants

import "edu.kit.ipd.sdq.asem" as asem
import "http://www.eclipse.org/papyrus/sysml/1.4/SysML" as sysml
import "http://www.eclipse.org/uml2/5.0.0/UML" as uml

reactions: sysml2asemBlock
in reaction to changes in uml
execute actions in asem


reaction SysMLBlockIsEncapsulatedChanged {
	
	after attribute replaced at sysml::Block[isEncapsulated]
		with newValue == true
		
	call {
		// The isEncapsulated flag of a SysMLBlock was set to true. Therefore create and persist the ASEM element.
		val block = affectedEObject;
		
		logger.info("[ASEMSysML] A SysML block (" + block.base_Class.name + ") was created and its isEncapsulated flag is true!");
		
		// Let user select the ASEM component to map the SysML block to.	
		val Class<?> selectedComponentTypeClass = ASEMSysMLUserInteractionHelper.selectASEMComponentType(userInteracting);
		
		if (Module.isAssignableFrom(selectedComponentTypeClass)) {
			createASEMModelWithModuleAsRootElement(block);
		}
		else if (edu.kit.ipd.sdq.ASEM.classifiers.Class.isAssignableFrom(selectedComponentTypeClass)) {
			createASEMModelWithClassAsRootElement(block);
		}
		else {
			logger.info("[ASEMSysML] Invalid user selection for a ASEM component type.");
		}
		
	}
}
routine createASEMModelWithModuleAsRootElement(sysml::Block block) {
	action {
		val rootElement = create asem::Module and initialize {
			rootElement.name = block.base_Class.name;
			
			persistProjectRelative(block, rootElement, ASEMSysMLHelper.getASEMProjectModelPath(block.base_Class.name));
		}
		add correspondence between block and rootElement
	}
}
routine createASEMModelWithClassAsRootElement(sysml::Block block) {
	action {
		val rootElement = create asem::Class and initialize {
			rootElement.name = block.base_Class.name;
			
			persistProjectRelative(block, rootElement, ASEMSysMLHelper.getASEMProjectModelPath(block.base_Class.name));
		}
		add correspondence between block and rootElement
	}
}

reaction ChangeNameOfSysMLBlock {
	// After changing the name, the element will be persisted.
	// The old resource will be deleted by some magic of the VITRUV framework.
	 
	after attribute replaced at uml::Class[name]
		with affectedEObject.getAppliedStereotype(ASEMSysMLConstants.QUALIFIED_BLOCK_NAME) != null &&
			UMLUtil.getStereotypeApplication(affectedEObject, Block).isEncapsulated
	call {
		logger.info("[ASEMSysML] Change name of ASEM component ...");
		val block = UMLUtil.getStereotypeApplication(affectedEObject, Block);
		changeNameOfSysMLBlockCorrespondence(block)
	}
}
routine changeNameOfSysMLBlockCorrespondence(sysml::Block block) {
	match {
		val asemComponent = retrieve asem::Component corresponding to block	
	}	
	action {
		update asemComponent {
			asemComponent.name = block.base_Class.name
			persistProjectRelative(block, asemComponent, ASEMSysMLHelper.getASEMProjectModelPath(block.base_Class.name));
		}
	}
}

reaction BlockDeletionTransformation {
	after element uml::Class deleted and removed from uml::Model[packagedElement]
		with oldValue.getAppliedStereotype(ASEMSysMLConstants.QUALIFIED_BLOCK_NAME) != null
	
	call {
		val block = UMLUtil.getStereotypeApplication(oldValue, Block);
		logger.info("[ASEMSysML] Remove ASEM component which corresponds to the SysML block " + block.base_Class.name);
		deleteBlockMapping(block);
	}
}
routine deleteBlockMapping(sysml::Block block) {
	match {
		val asemComponent = retrieve asem::Component corresponding to block
	}
	action {
		delete asemComponent
	}
}