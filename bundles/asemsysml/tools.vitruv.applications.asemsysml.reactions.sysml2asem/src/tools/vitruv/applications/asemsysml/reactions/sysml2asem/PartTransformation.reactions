import edu.kit.ipd.sdq.ASEM.classifiers.Module
import org.eclipse.papyrus.sysml14.blocks.Block
import org.eclipse.uml2.uml.AggregationKind
import org.eclipse.uml2.uml.Class
import org.eclipse.uml2.uml.util.UMLUtil
import tools.vitruv.applications.asemsysml.ASEMSysMLConstants

import "edu.kit.ipd.sdq.asem" as asem
import "http://www.eclipse.org/papyrus/sysml/1.4/SysML" as sysml
import "http://www.eclipse.org/uml2/5.0.0/UML" as uml

reactions: sysml2asemPart
in reaction to changes in uml
execute actions in asem

reaction PartTransformation {
 	// For the part transformation the part name and type are necessary.
 	// A property is a part property if
 	// 	- the containing element of the property is a block
 	// 	- the type of the property is a block
 	//	- the aggregation kind of the property must be set to composite
 	after value replaced for uml::Property[aggregation]
 		with change.affectedEObject.eContainer instanceof Class &&
 		(change.affectedEObject.eContainer as Class).getAppliedStereotype(ASEMSysMLConstants.QUALIFIED_BLOCK_NAME) != null &&
 		change.affectedEObject.type != null && change.affectedEObject.type.getAppliedStereotype(ASEMSysMLConstants.QUALIFIED_BLOCK_NAME) != null &&
 		change.affectedEObject.aggregation != null && change.affectedEObject.aggregation.equals(AggregationKind.COMPOSITE_LITERAL)
 		
 	call {
 		val partProperty = change.affectedEObject;
 		val blockBaseClass = partProperty.eContainer as Class;
 		logger.info("[ASEMSysML] Part " + partProperty.name + " for block " + blockBaseClass.name + " added.");
 		
 		createPartCorrespondence(partProperty, blockBaseClass);
 	}
 }
 routine createPartCorrespondence(uml::Property partProperty, uml::Class blockBaseClass) {
 	match {
 		// Corresponding ASEM element of the block.
 		val asemBlockComponent = retrieve asem::Component corresponding to UMLUtil.getStereotypeApplication(blockBaseClass, Block)
 		// Corresponding ASEM element of the part.
 		val asemPartComponent = retrieve asem::Component corresponding to UMLUtil.getStereotypeApplication(partProperty.type, Block)
 		
 		// ASEM modules cannot be used as subcomponents in ASEM components.
 		// TODO [BR] Show user feedback.	
 		check (asemPartComponent instanceof Module) == false
 	}
 	action {
 		val asemConstant = create asem::Constant and initialize {
 			asemConstant.name = partProperty.name;
 			asemConstant.type = asemPartComponent;
 		}
 		call {
 			asemBlockComponent.typedElements.add(asemConstant)
 		}
 		add correspondence between partProperty and asemConstant
 	}
 }
 
 reaction PartDeletionTransformation {
 	after list entry deleted and removed in uml::Class[ownedAttribute]
 		with change.affectedEObject.getAppliedStereotype(ASEMSysMLConstants.QUALIFIED_BLOCK_NAME) != null &&
 		change.oldValue.type != null && change.oldValue.type.getAppliedStereotype(ASEMSysMLConstants.QUALIFIED_BLOCK_NAME) != null &&
 		change.oldValue.aggregation != null && change.oldValue.aggregation.equals(AggregationKind.COMPOSITE_LITERAL)
 	call {
 		logger.info("Delete part property reference ...");
 		deletePartReference(change.oldValue);
 	}
 }
 routine deletePartReference(uml::Property property) {
 	match {
 		val asemConstant = retrieve asem::Constant corresponding to property	
 	}
 	action {
 		delete asemConstant
 	}
 }