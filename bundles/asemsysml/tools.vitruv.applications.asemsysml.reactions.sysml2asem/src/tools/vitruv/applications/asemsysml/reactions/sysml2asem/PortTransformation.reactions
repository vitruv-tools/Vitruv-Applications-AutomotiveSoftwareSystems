import org.eclipse.papyrus.sysml14.blocks.Block
import org.eclipse.papyrus.sysml14.portsandflows.FlowDirection
import org.eclipse.uml2.uml.Class
import org.eclipse.uml2.uml.Port
import org.eclipse.uml2.uml.PrimitiveType
import org.eclipse.uml2.uml.util.UMLUtil
import tools.vitruv.applications.asemsysml.ASEMSysMLConstants
import tools.vitruv.applications.asemsysml.ASEMSysMLHelper
import tools.vitruv.applications.asemsysml.ASEMSysMLPrimitiveTypeHelper
import tools.vitruv.applications.asemsysml.ASEMSysMLUserInteractionHelper.ASEMParameterMode
import tools.vitruv.applications.asemsysml.ASEMSysMLUserInteractionHelper

import "edu.kit.ipd.sdq.asem" as asem
import "http://www.eclipse.org/papyrus/sysml/1.4/SysML" as sysml
import "http://www.eclipse.org/uml2/5.0.0/UML" as uml

reactions: sysml2asemPort
in reaction to changes in uml
execute actions in asem


reaction PortTransformation {
	
	after attribute replaced at uml::Port[name]
		with affectedEObject.owner instanceof Class &&
			affectedEObject.owner.getAppliedStereotype(ASEMSysMLConstants.QUALIFIED_BLOCK_NAME) != null &&
			oldValue == null

	call {
		val port = affectedEObject
		logger.info("[ASEMSysML] Port with name " + newValue + " was created.");
		
		// The mapping to an ASEM class is direction specific. Therefore it will be handled in the PortDirectionTransformation.
		mapPortToModule(port);
	}
}
routine mapPortToModule(uml::Port port) {
	match {
		val asemModule = retrieve asem::Module corresponding to UMLUtil.getStereotypeApplication(port.owner, Block)
	}
	action {
		val asemMessage = create asem::Message and initialize {
			
			// [Requirement 1.d)i]
			asemMessage.name = port.name;
			
		}
		call {
			asemModule.typedElements.add(asemMessage)
		}
		add correspondence between port and asemMessage
	}
}

reaction PortDirectionTransformation {
	after element replaced at sysml::BindingConnector[base_Connector]
	call {
		val bindingConnector = affectedEObject;
		for(connectorEnds: bindingConnector.base_Connector.ends) {
			if(connectorEnds.role instanceof Port) {
				val port = connectorEnds.role as Port;
				setMessageAccessProperties(port);
				mapPortToClass(port);
			}
		}
	}
}
routine setMessageAccessProperties(uml::Port port) {
	match {
		val asemMessage = retrieve asem::Message corresponding to port
		check ASEMSysMLHelper.getFlowProperty(port) != null
	}
	action {
		update asemMessage {
		
			// [Requirement 1.d)ii]
			val flowProperty = ASEMSysMLHelper.getFlowProperty(port);
			val flowDirection = flowProperty.direction;
			switch(flowDirection) {
				case IN: {
					asemMessage.readable = true;
					asemMessage.writable = false;
				}
				case INOUT: {
					asemMessage.readable = true;
					asemMessage.writable = true;
				}
				case OUT: {
					asemMessage.readable = false;
					asemMessage.writable = true;
				}
			}
			
		}
	}
}
routine mapPortToClass(uml::Port port) {
	match {
		val asemComponent = retrieve asem::Component corresponding to UMLUtil.getStereotypeApplication(port.owner, Block)
		check asemComponent instanceof edu.kit.ipd.sdq.ASEM.classifiers.Class
	}
	action {
		call mapINPortToClass(port, asemComponent)
		call mapOUTPortToClass(port, asemComponent)
		call mapINOUTPortToClass(port, asemComponent)
		
	}	
}
routine mapINPortToClass(uml::Port port, asem::Component correspondingComponent) {
	   
	match {
		// [Requirement 2.d)ii]
		check ASEMSysMLHelper.getFlowProperty(port) != null
		check ASEMSysMLHelper.getFlowProperty(port).direction.equals(FlowDirection.IN)
	}
	action {
		// [Requirement 2.d)iii]
		val asemParameter = create asem::Parameter and initialize {
			// [Requirement 2.d)i]
			asemParameter.name = port.name;
			// [Requirement 2.d)iv] [Requirement 2.d)v] [Requirement 2.d)vi]
			asemParameter.type = ASEMSysMLHelper.getClassifierForASEMVariable(port.type, this.correspondenceModel);
		}
		
		call {
			val asemProjectModelPath = ASEMSysMLHelper.getASEMProjectModelPath(correspondingComponent.name);
			val asemResource = ASEMSysMLHelper.getModelResource(this.correspondenceModel, port, asemProjectModelPath);
			var mode = ASEMParameterMode.CREATE_NEW;
			
			if(ASEMSysMLHelper.areMethodsAvailable(asemResource)) {
				mode = ASEMSysMLUserInteractionHelper.selectASEMParameterMode(this.userInteracting);
			}
			
			switch (mode) {
				case CREATE_NEW: {
					createNewMethodWithParameter(port, asemParameter, correspondingComponent);
				}
				case USE_EXISTING: {
					var method = ASEMSysMLUserInteractionHelper.selectASEMMethodForParameter(this.userInteracting, asemResource);
					addParameter(port, method, asemParameter, correspondingComponent);
				}
		    }
			
		}		
	}	
}
routine addParameter(uml::Port port, asem::Method asemMethod, asem::Parameter asemParameter, asem::Component correspondingComponent) {
	action {
		update asemMethod {
			asemMethod.parameters.add(asemParameter);
		}
		
		// [Requirement 2.d)]
		add correspondence between port and asemParameter
		
		update correspondingComponent {
			correspondingComponent.methods.add(asemMethod);
		}
	}
}
routine createNewMethodWithParameter(uml::Port port, asem::Parameter asemParameter, asem::Component correspondingComponent) {
	action {
		val asemMethod = create asem::Method and initialize {
			val methodName = userInteracting.getTextInput(ASEMSysMLUserInteractionHelper.MSG_INSERT_METHOD_NAME);
			asemMethod.name = methodName;
			asemMethod.parameters.add(asemParameter);
		}
		
		// [Requirement 2.d)]
		add correspondence between port and asemParameter
		
		update correspondingComponent {
			correspondingComponent.methods.add(asemMethod);
		}
	}
}
routine mapOUTPortToClass(uml::Port port, asem::Component correspondingComponent) { 
	match {
		// [Requirement 2.e)i]
		check ASEMSysMLHelper.getFlowProperty(port) != null
		check ASEMSysMLHelper.getFlowProperty(port).direction.equals(FlowDirection.OUT)
	}
	action {
		// [Requirement 2.e)ii]
		val asemReturnType = create asem::ReturnType and initialize {
			// [Requirement 2.e)iii] [Requirement 2.e)iv] [Requirement 2.e)v]
			asemReturnType.type = ASEMSysMLHelper.getClassifierForASEMVariable(port.type, this.correspondenceModel);
			asemReturnType.name = port.name;
		}
		
		call {
			val asemProjectModelPath = ASEMSysMLHelper.getASEMProjectModelPath(correspondingComponent.name);
			val asemResource = ASEMSysMLHelper.getModelResource(this.correspondenceModel, port, asemProjectModelPath);
			var mode = ASEMParameterMode.CREATE_NEW;
			
			if(ASEMSysMLHelper.areMethodsWithoutReturnTypeAvailable(asemResource)) {
				mode = ASEMSysMLUserInteractionHelper.selectASEMParameterMode(this.userInteracting);
			}
			
			switch (mode) {
				case CREATE_NEW: {
					createNewMethodWithReturnType(port, asemReturnType, correspondingComponent);
				}
				case USE_EXISTING: {
					var method = ASEMSysMLUserInteractionHelper.selectASEMMethodForReturnType(this.userInteracting, asemResource);
					addReturnType(port, method, asemReturnType, correspondingComponent);
				}
		    }
			
		}	
	}
}
routine createNewMethodWithReturnType(uml::Port port, asem::ReturnType asemReturnType, asem::Component correspondingComponent) {
	action {
		val asemMethod = create asem::Method and initialize {
			var methodName = userInteracting.getTextInput("Please insert a method name which can be used for mapping a SysML port to an ASEM method.")
			if(methodName.empty) {
				methodName = "SampleMethodName";
			}
			asemMethod.name = methodName;
			asemMethod.returnType = asemReturnType;
		}
		
		// [Requirement 2.e)] 
		add correspondence between port and asemReturnType
		
		update correspondingComponent {
			correspondingComponent.methods.add(asemMethod);
		}
	}
}
routine addReturnType(uml::Port port, asem::Method asemMethod, asem::ReturnType asemReturnType, asem::Component correspondingComponent) {
	action {
		update asemMethod {
			asemMethod.returnType = asemReturnType;
		}
		
		// [Requirement 2.d)]
		add correspondence between port and asemReturnType
		
		update correspondingComponent {
			correspondingComponent.methods.add(asemMethod);
		}
	}
}
routine mapINOUTPortToClass(uml::Port port, asem::Component correspondingComponent) {
	match {
		check ASEMSysMLHelper.getFlowProperty(port) != null
		check ASEMSysMLHelper.getFlowProperty(port).direction.equals(FlowDirection.INOUT)
	}
	action {
		call {
			logger.warn("INOUT ports are not mapped to ASEM models at the moment!");
		}
	}
}

reaction PortTypeTransformation {
	after element replaced at uml::Port[type]
	call {
		val port = affectedEObject;
		val block = UMLUtil.getStereotypeApplication(newValue, Block);
		
		if(block != null) {
			transformPortType(port, block);		
		} else if(newValue instanceof PrimitiveType) {
			transformPrimitivePortType(port);
		}
	}
}
routine transformPortType(uml::Port port, sysml::Block block){
	match {
		val asemMessage = retrieve asem::Message corresponding to port
		val asemComponent = retrieve asem::Component corresponding to block
	}
	action {
		update asemMessage {
			
			// [Requirement 1.d)iii]
			asemMessage.type = asemComponent;
			
		}
	}
}
routine transformPrimitivePortType(uml::Port port) {
	match {
		val asemMessage = retrieve asem::Message corresponding to port
	}
	action {
		
		update asemMessage {			
			val messageType = ASEMSysMLPrimitiveTypeHelper.PRIMITIVE_TYPE_MAP.get(port.type);
			asemMessage.type = ASEMSysMLPrimitiveTypeHelper.getASEMPrimitiveTypeFromRepository(messageType, asemMessage);
		}
	}
}

reaction PortDeletionTransformation {
	after element uml::Property deleted and removed from uml::Class[ownedAttribute]
	with oldValue instanceof Port
	call {
		
		logger.info("[ASEMSysML] Delete port reference for port " + oldValue.name + " ...");
		deletePortReference(oldValue as Port);
	
	}
}
routine deletePortReference(uml::Port port) {
	match {
		val correspondingElement = retrieve asem::TypedElement corresponding to port
	}
	action {
		delete correspondingElement
	}
}