import edu.kit.ipd.sdq.ASEM.classifiers.Module
import java.util.ArrayList
import java.util.HashSet
import java.util.List
import java.util.Set
import org.eclipse.papyrus.sysml14.blocks.Block
import org.eclipse.uml2.uml.util.UMLUtil
import tools.vitruv.applications.asemsysml.reactions.sysml2asem.util.ASEMSysMLReactionHelper
import tools.vitruv.framework.userinteraction.UserInteractionType

import "edu.kit.ipd.sdq.asem" as asem
import "http://www.eclipse.org/papyrus/sysml/1.4/SysML" as sysml
import "http://www.eclipse.org/uml2/5.0.0/UML" as uml

reactions: sysml2asem
in reaction to changes in uml
execute actions in asem

// TODO [BR] Only for debugging purposes.
reaction Debug {
	after any change
	call {
//		System.out.println("[ASEMSysML] [Change] " + change);
	}
}

/*
 * SysML block reactions
 * ---------------------------------------------------------------------------------------------------
 */
reaction SysMLBlockCreated {
	
	after value replaced for sysml::Block[base_Class]
		with change.affectedEObject.encapsulated == true
	
	call {
		// A new SysML block was created. The isEncapsulated flag isn't set at this moment and its initial value is false.
		// So this reaction should never be called. The creation of the ASEM element will be done in the SysMLBlockIsEncapsulatedChanged reaction.
		val blocksBaseClass = change.newValue;
		val block = change.affectedEObject;
		val isEncapsulated = block.encapsulated;
		System.out.println("[ASEMSysML] A SysML block was created! Its name is: " + blocksBaseClass.name + " and the isEncapsulated flag is: " + isEncapsulated);
		
	}
	
}

reaction SysMLBlockIsEncapsulatedChanged {
	
	after value replaced for sysml::Block[isEncapsulated]
		with change.newValue == true
		
	call {
		// The isEncapsulated flag of a SysMLBlock was set to true. Therefore create and persist the ASEM element.
		val block = change.affectedEObject;
		
		System.out.println("[ASEMSysML] A SysML block (" + block.base_Class.name + ") was created and its isEncapsulated flag is true!");
		
		// Let user select the ASEM component to map the SysML block to.
		var Set<Class<?>> asemComponents = new HashSet
		asemComponents.addAll(#[Module, edu.kit.ipd.sdq.ASEM.classifiers.Class]);
		
		val List<String> asemComponentNames = new ArrayList<String>(asemComponents.size)
		for (asemComponent : asemComponents) {
			asemComponentNames.add(asemComponent.name)
		}
		
		val String selectComponentMsg = "Please select an ASEM component type the SysML block should mapped to."
		val int selectedComponentType = userInteracting.selectFromMessage(UserInteractionType.MODAL, selectComponentMsg, asemComponentNames)
		val Class<?> selectedComponentTypeClass = asemComponents.get(selectedComponentType)
		
		createASEMModelWithRootElement(block, selectedComponentTypeClass.name);
	}
}

routine createASEMModelWithRootElement(sysml::Block block, String componentClassName) {
	action {
		call {
			// TODO [BR] Rework this part. Use classes instead of class names?
			if (componentClassName.equals("edu.kit.ipd.sdq.ASEM.classifiers.Module")) {
				createASEMModelWithModuleAsRootElement(block);
			}
			else if (componentClassName.equals("edu.kit.ipd.sdq.ASEM.classifiers.Class")) {
				// FIXME [BR] Class transformation is not yet supported.
				createASEMModelWithModuleAsRootElement(block);
			}
		}
	}
}
routine createASEMModelWithModuleAsRootElement(sysml::Block block) {
	action {
		val rootElement = create asem::Module and initialize {
			rootElement.name = block.base_Class.name;
			
			persistProjectRelative(block, rootElement, ASEMSysMLReactionHelper.getASEMProjectModelPath(block.base_Class.name));
		}
		add correspondence between block and rootElement
	}
}

reaction ChangeNameOfSysMLBlock {
	// After changing the name, the element will be persisted.
	// The old resource will be deleted by some magic of the VITRUV framework.
	 
	after value replaced for uml::Class[name]
		with change.affectedEObject.getAppliedStereotype("SysML::Blocks::Block") != null &&
			UMLUtil.getStereotypeApplication(change.affectedEObject, Block).isEncapsulated
	call {
		System.out.println("[ASEMSysML] Change name of ASEM component ...");
		val block = UMLUtil.getStereotypeApplication(change.affectedEObject, Block);
		changeNameOfSysMLBlockCorrespondence(block)
	}
}
routine changeNameOfSysMLBlockCorrespondence(sysml::Block block) {
	match {
		val asemComponent = retrieve asem::Component corresponding to block	
	}	
	action {
		call {
			asemComponent.name = block.base_Class.name
			persistProjectRelative(block, asemComponent, ASEMSysMLReactionHelper.getASEMProjectModelPath(block.base_Class.name));
		}
	}
}